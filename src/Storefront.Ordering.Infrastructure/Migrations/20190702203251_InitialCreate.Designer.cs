// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Storefront.Ordering.Infrastructure.Database;

namespace Storefront.Ordering.Infrastructure.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20190702203251_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Storefront.Ordering.Domain.Entities.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<string>("PhotoId")
                        .HasColumnName("photo_id")
                        .HasMaxLength(50);

                    b.HasKey("Id")
                        .HasName("pk_category");

                    b.ToTable("categories","ordering");
                });

            modelBuilder.Entity("Storefront.Ordering.Domain.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<long>("CategoryId")
                        .HasColumnName("category_id");

                    b.Property<bool>("IsAvailable")
                        .HasColumnName("is_available");

                    b.Property<string>("PhotoId")
                        .HasColumnName("photo_id")
                        .HasMaxLength(50);

                    b.Property<decimal>("Price")
                        .HasColumnName("price")
                        .HasColumnType("decimal(8,2)");

                    b.HasKey("Id")
                        .HasName("pk_item");

                    b.HasIndex("CategoryId");

                    b.ToTable("items","ordering");
                });

            modelBuilder.Entity("Storefront.Ordering.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id");

                    b.Property<DateTime?>("CanceledAt")
                        .HasColumnName("canceled_at");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnName("completed_at");

                    b.Property<DateTime?>("DeliveredAt")
                        .HasColumnName("delivered_at");

                    b.Property<DateTime>("OpenAt")
                        .HasColumnName("open_at");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnName("started_at");

                    b.HasKey("Id")
                        .HasName("pk_order");

                    b.ToTable("orders","ordering");
                });

            modelBuilder.Entity("Storefront.Ordering.Domain.Entities.OrderItem", b =>
                {
                    b.Property<long>("OrderId")
                        .HasColumnName("order_id");

                    b.Property<long>("ItemId")
                        .HasColumnName("item_id");

                    b.Property<int>("Quantity")
                        .HasColumnName("quantity");

                    b.HasKey("OrderId", "ItemId")
                        .HasName("pk_order_item");

                    b.HasIndex("ItemId");

                    b.ToTable("order_items","ordering");
                });

            modelBuilder.Entity("Storefront.Ordering.Domain.Entities.Category", b =>
                {
                    b.OwnsOne("Storefront.Ordering.Domain.Entities.Showcase", "Showcase", b1 =>
                        {
                            b1.Property<long>("CategoryId");

                            b1.Property<string>("Description")
                                .HasColumnName("description")
                                .HasMaxLength(255);

                            b1.Property<string>("Name")
                                .HasColumnName("name")
                                .HasMaxLength(80);

                            b1.HasKey("CategoryId");

                            b1.ToTable("categories","ordering");

                            b1.HasOne("Storefront.Ordering.Domain.Entities.Category")
                                .WithOne("Showcase")
                                .HasForeignKey("Storefront.Ordering.Domain.Entities.Showcase", "CategoryId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Storefront.Ordering.Domain.Entities.Item", b =>
                {
                    b.HasOne("Storefront.Ordering.Domain.Entities.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("fk_item__category")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.OwnsOne("Storefront.Ordering.Domain.Entities.Showcase", "Showcase", b1 =>
                        {
                            b1.Property<long>("ItemId");

                            b1.Property<string>("Description")
                                .HasColumnName("description")
                                .HasMaxLength(255);

                            b1.Property<string>("Name")
                                .HasColumnName("name")
                                .HasMaxLength(80);

                            b1.HasKey("ItemId");

                            b1.ToTable("items","ordering");

                            b1.HasOne("Storefront.Ordering.Domain.Entities.Item")
                                .WithOne("Showcase")
                                .HasForeignKey("Storefront.Ordering.Domain.Entities.Showcase", "ItemId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Storefront.Ordering.Domain.Entities.Order", b =>
                {
                    b.OwnsOne("Storefront.Ordering.Domain.Entities.Contact", "Contact", b1 =>
                        {
                            b1.Property<long>("OrderId");

                            b1.Property<string>("Email")
                                .HasColumnName("email")
                                .HasMaxLength(80);

                            b1.Property<string>("Mobile")
                                .HasColumnName("mobile")
                                .HasMaxLength(20);

                            b1.Property<string>("Name")
                                .HasColumnName("name")
                                .HasMaxLength(50);

                            b1.HasKey("OrderId");

                            b1.ToTable("orders","ordering");

                            b1.HasOne("Storefront.Ordering.Domain.Entities.Order")
                                .WithOne("Contact")
                                .HasForeignKey("Storefront.Ordering.Domain.Entities.Contact", "OrderId")
                                .OnDelete(DeleteBehavior.Cascade);
                        });
                });

            modelBuilder.Entity("Storefront.Ordering.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("Storefront.Ordering.Domain.Entities.Item", "Item")
                        .WithMany("OrderItems")
                        .HasForeignKey("ItemId")
                        .HasConstraintName("fk_order_item__item")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Storefront.Ordering.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("fk_order_item__order")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
